import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { IReservation } from '../../models/reservation/reservation.interface';
import { DisabledTimeslotService } from '../../services/disabledTimeslot/disabledTimeslot.service';
import { DisabledTimeslot } from '../../models/disabledTimeslot/disabledTimeslot.interface';
import { ReservationFormService } from '../../services/reservation-form/reservation-form.service';
import { ITimeslot } from '../../models/timeslot/timeslot.interface';

@Component({
    selector: 'app-reservation-form',
    templateUrl: './reservation-form.component.html',
    styleUrl: './reservation-form.component.scss',
    standalone: false
})
export class ReservationFormComponent implements OnInit {
  @Input() fieldId!: string;
  @Input() timeslots: ITimeslot[] = [];
  @Input() disabledTimeslotIds: string[] = [];
  @Output() reserveTimeslot = new EventEmitter<IReservation>();

  reservationForm!: FormGroup;
  selectedDate: Date | null = null;

  constructor(
    private fb: FormBuilder,
    private reservationFormService: ReservationFormService
  ) {}

  ngOnInit(): void {
    this.createForm();
  }

  private createForm(): void {
    this.reservationForm = this.reservationFormService.createReservationForm();
  }

  onDateChange(date: Date): void {
    this.selectedDate = date;
  }

  submitReservation(): void {
    if (this.reservationForm.valid && this.selectedDate) {
      const reservation: IReservation = {
        ...this.reservationForm.value,
        fieldId: this.fieldId,
        date: this.selectedDate.toISOString().split('T')[0],
        confirmationNo: '', // to be filled after payment
        reservationId: '',  // generated by backend
        status: '',         // filled on backend
        createdAt: ''       // filled on backend
      };

      this.reserveTimeslot.emit(reservation);
    }
  }
}
